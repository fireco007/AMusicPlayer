package com.x2m.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.x2m.db.TB_Music;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB__MUSIC".
*/
public class TB_MusicDao extends AbstractDao<TB_Music, Long> {

    public static final String TABLENAME = "TB__MUSIC";

    /**
     * Properties of entity TB_Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Artist = new Property(2, String.class, "artist", false, "ARTIST");
        public final static Property Album = new Property(3, String.class, "album", false, "ALBUM");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Fmt = new Property(6, String.class, "fmt", false, "FMT");
        public final static Property Rate = new Property(7, Integer.class, "rate", false, "RATE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;


    public TB_MusicDao(DaoConfig config) {
        super(config);
    }
    
    public TB_MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB__MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"ARTIST\" TEXT," + // 2: artist
                "\"ALBUM\" TEXT," + // 3: album
                "\"PATH\" TEXT NOT NULL ," + // 4: path
                "\"STATUS\" INTEGER," + // 5: status
                "\"FMT\" TEXT," + // 6: fmt
                "\"RATE\" INTEGER," + // 7: rate
                "\"TYPE\" TEXT);"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB__MUSIC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TB_Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(3, artist);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
        stmt.bindString(5, entity.getPath());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        String fmt = entity.getFmt();
        if (fmt != null) {
            stmt.bindString(7, fmt);
        }
 
        Integer rate = entity.getRate();
        if (rate != null) {
            stmt.bindLong(8, rate);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    @Override
    protected void attachEntity(TB_Music entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TB_Music readEntity(Cursor cursor, int offset) {
        TB_Music entity = new TB_Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // artist
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // album
            cursor.getString(offset + 4), // path
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fmt
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // rate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TB_Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setArtist(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPath(cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFmt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRate(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TB_Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TB_Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
